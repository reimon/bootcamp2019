yarn add multer

// sigle = um arquivo por vez, com o campo/parametro file
routes.post('/files', upload.single('file'), (req, res) => {
  return res.json(req.file);
});



req.file
{
  "fieldname": "file",
  "originalname": "we eat batman.jpg",
  "encoding": "7bit",
  "mimetype": "image/jpeg",
  "destination": "/home/rodrigo/Documents/NodeJS/Bootcamp/modulos02_03/tmp/uploads",
  "filename": "5a64e237e2d413e71598e57026cee4e1.jpg",
  "path": "/Bootcamp/modulos02_03/tmp/uploads/5a64e237e2d413e71598e57026cee4e1.jpg",
  "size": 559959
}


# criando tabela com referencia para os arquivos
yarn sequelize migration:create --name=create-files
yarn sequelize db:migrate

# criando a migrate de relacionamento
yarn sequelize migration:create --name=add-avatar-field-to-users
yarn sequelize db:migrate


####################
# tabela de agendamentos
yarn sequelize migration:create --name=create-appointments
yarn sequelize db:migrate


modulos02_03/src/database/migrations/20190701225425-create-appointments.js
...
      user_id: {
        type: Sequelize.INTEGER,
        references: { model: 'files', key: 'id' },
        onUpdate: 'CASCADE',
        onDelete: 'SET NULL', // quando um usuário for deletado, mantem os agendamentos setando o campo user_id com null
        // onDelete: 'CASCADE', // quando um usuário for deletado, todos os agendamentos serão deletados
        allowNull: true,
      },
...

a tabela appointments possui dois relacionamentos, um com o usuário que faz o agendamento e um com o prestador de serviço 
que vai atender o agendamento


####################
# validando agendamentos

- agendamento somente para datas futuras  
- não permite um agendamento num mesmo horário por um provider
- agendamento por hora, se houver agendamento as 18h00 e tentar um agendamento as 18h30, não permitirá


# biblioteca para lidar com datas
# instala a ultima versão
yarn add date-fns@next

####################
# MONGO db

docker run --name mongobarber -p 27017:27017 -d -t mongo

Digest: sha256:83cb1a2a789cef7b6fb20b397f20d3b678b81525a493ee2df23b5adefae95ea3
Status: Downloaded newer image for mongo:latest
cdc57e291eedea8ed5b949f86f7c3c2ab50838fcdc3325de933f43e14c60c1ea

yarn add mongoose

# as notificações serão armazenadas no mongodb



################################
# Notificações por e-mail
yarn add nodemailer

# Serviços de e-mail
Amazon SES
Mailgun
Sparkpost
Mandril (só para quem usa Mailchip)
GMAIL (SMTP tem limite)

Mailtrap (DEV)
https://mailtrap.io/


################################
# E-mail template

template engines = arquivos html que podem receber variaveis do node
https://handlebarsjs.com/

yarn add express-handlebars nodemailer-express-handlebars


################################
# REDIS

Sistema de fila, com banco de dados esquema chave/valor

# Redis com itens essenciais do linux, bem leve
docker run --name redisbarber -p 6379:6379 -d -t redis:alpine

Digest: sha256:da9b0c7eda77322a270c5401c14788608513f5e3578e3dc3343169a3732c5e2f
Status: Downloaded newer image for redis:alpine
235db08c9eb44cc3d1cef99ab4d73c21a5a18d76a05806e465e93e1fe223df6e


# instalar o bee queue
https://github.com/bee-queue/bee-queue

yarn add bee-queue

# outra opção
https://github.com/Automattic/kue


queue roda em outro processo


################################
# Horários disponíveis

# data atual 03/07/2019
> new Date().getTime()
1562159567604

################################
# Tratamento de excessões

https://sentry.io

yarn add @sentry/node@5.4.3

# permite que o express capture erros de chamadas assincronas
yarn add express-async-errors

# quando um middleware recebe quatro parametros o express entende que ele é um 
# middleware de tratamento de excessões

yarn add youch

# no app.js a lista de imports deve estar na ordem

import express from 'express';
import path from 'path';
import Youch from 'youch';
import * as Sentry from '@sentry/node';
import 'express-async-errors';

import sentryConfig from './config/sentry';
import routes from './routes';

################################
# Variáveis de ambiente

.env

yarn add dotenv

# no arquivo app.js
import 'dotenv/config';

# carrega todas as variaveis na process.env
