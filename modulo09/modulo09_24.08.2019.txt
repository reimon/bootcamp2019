yarn create react-app modulo09

#################################
# botão direito no vscode, selecionar Generate .editorconfig


  root = true

  [*]
  end_of_line= lf
  indent_style = space
  indent_size = 2
  charset = utf-8
  trim_trailing_whitespace = true
  insert_final_newline = true

######################################################
# ESLINT e outras perfumarias

yarn add eslint -D
yarn eslint --init


# remova o arquivo package-lock.json e code novamente o yarn

# instalar mais dependencias
yarn add prettier eslint-config-prettier eslint-plugin-prettier babel-eslint -D

# instalar dependencia do eslint para hooks

yarn add eslint-plugin-react-hooks -D


# criar arquivo .prettierrc com o conteudo
{
  "singleQuote": true,
  "trailingComma": "es5"
}

# arquivo .eslintrc.js

module.exports = {
  env: {
    es6: true,
    jest: true,
    browser: true
  },
  extends: ["airbnb", "prettier", "prettier/react"],
  globals: {
    Atomics: "readonly",
    SharedArrayBuffer: "readonly",
    __DEV__: true
  },
  parserOptions: {
    ecmaFeatures: {
      jsx: true
    },
    ecmaVersion: 2018,
    sourceType: "module"
  },
  plugins: ["react", "jsx-a11y", "import", "react-hooks", "prettier"],
  rules: {
    "prettier/prettier": "error",
    "react/jsx-filename-extension": ["error", { extensions: [".js", ".jsx"] }],
    "import/prefer-default-export": "off",
    "no-unused-vars": ["error", { argsIgnorePattern: "^_" }],
    "react/jsx-one-expression-per-line": "off",
    "global-require": "off",
    "react-native/no-raw-text": "off",
    "no-param-reassign": "off",
    "no-underscore-dangle": "off",
    camelcase: "off",
    "no-console": ["error", { allow: ["tron"] }],
    "react-hooks/rules-of-hooks": "error",
    "react-hooks/exhaustive-deps": "warn"
  },
  settings: {
    "import/resolver": {
      "babel-plugin-root-import": {
        rootPathSuffix: "src"
      },
    },
  },
};

######################################################
# no arquivo pckage.json trocar

"babel-eslint": "^10.0.2",
# para
"babel-eslint": "10.0.1",
# excutar novamente o yarn


######################################################
# Reactotron

yarn add reactotron-react-js


# criar arquivo
src/config/ReactotronConfig.js

import Reactotron from "reactotron-react-js";

if (process.env.NODE_ENV === "development") {
  const tron = Reactotron.configure().connect();

  tron.clear();

  console.tron = tron;
}


# em src/App.js importat o Reactotron

import "./config/ReactotronConfig";

######################################################
# Utilizando Root Import

yarn add customize-cra react-app-rewired -D
yarn add babel-plugin-root-import -D

# criar arquivo na raiz chamado config-overrides.js

const { addBabelPlugin, override } = require('customize-cra');

module.exports = override(
  addBabelPlugin([
    'babel-plugin-root-import',
    {
      rootPathSuffix: 'src',
    },
  ])
);


# em package.json mudar:
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },

# para:
  "scripts": {
    "start": "react-app-rewired start",
    "build": "react-app-rewired build",
    "test": "react-app-rewired test",
    "eject": "react-scripts eject"
  },

# reinicie o servidor com yarn start

# instale a dependencia do eslint para essa perfumaria funcionar
yarn add eslint-import-resolver-babel-plugin-root-import -D

# em .eslintrc.js colocar settings depois de rules

  rules: {
    ...
  },
  settings: {
    "import/resolver": {
      "babel-plugin-root-import": {
        rootPathSuffix: "src"
      },
    },
  },


# para o vscode ir para o arquivo quando clicar pressionando o CTRL
# crie o arquivo jsconfig.json
{
  "compilerOptions": {
     "baseUrl":"src",
     "paths":{
        "~/*":["*"]
      }
  }
}



######################################################
# Utilizando Unform (Rocketseat)

yarn add @rocketseat/unform


# exemplo: src/pages/SignIn/index.js

import React from 'react';
import { Link } from 'react-router-dom';
import { Form, Input } from '@rocketseat/unform';

import logo from '~/assets/logo.svg';

export default function SignIn() {
  function handleSubmit(data) {
    console.tron.log(data);
  }

  return (
    <>
      <img src={logo} alt="GoBarber" />

      <Form onSubmit={handleSubmit}>
        <Input name="email" type="email" placeholder="Seu e-mail" />
        <Input
          name="password"
          type="password"
          placeholder="Sua senha secreta"
        />

        <button type="submit">Acessar</button>
        <Link to="/register">Criar conta gratuita</Link>
      </Form>
    </>
  );
}


######################################################
# Validação, usando o yup

yarn add yup



import * as yup from 'yup';

const schema = Yup.object().shape({
  email: Yup.string()
    .email('Insira um e-mail válido')
    .required('O email é obrigatório'),
  password: Yup.string().required('A senha é obrigatória'),
});

...
  <Form schema={schema} onSubmit={handleSubmit}>


######################################################
03/11/2019

Redux será utilizado para armazenar login, senha e token de autenticação
